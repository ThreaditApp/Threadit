openapi: 3.1.0
info:
  title: CommentService API
  description: API for managing comments and replies in the Threadit application.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: http://localhost:8000
    description: Local server
tags:
  - name: Comments
    description: Operations related to comments
paths:
  /comments:
    get:
      summary: Retrieve multiple comments
      operationId: listComments
      tags:
        - Comments
      parameters:
        - name: post_id
          in: query
          description: Retrieve comments for a specific post ID
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Invalid request format
    post:
      summary: Create a new comment on a post
      operationId: createComment
      tags:
        - Comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "201":
          description: Comment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Invalid request format
        "401":
          description: Unauthorized access
  /comments/{id}:
    get:
      summary: Get details of a specific comment
      operationId: getComment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Comment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Comment not found
    put:
      summary: Update a comment
      operationId: updateComment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdate"
      responses:
        "200":
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Invalid request format
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden action
        "404":
          description: Comment not found
    delete:
      summary: Delete a comment
      operationId: deleteComment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Comment deleted
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden action
        "404":
          description: Comment not found
  /comment/{id}/replies:
    post:
      summary: Reply to a comment
      operationId: replyToComment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentCreate"
      responses:
        "201":
          description: Reply added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Invalid request format
        "401":
          description: Unauthorized access

components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        post_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        content:
          type: string
        parent_id:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
    CommentCreate:
      type: object
      required:
        - post_id
        - content
      properties:
        post_id:
          type: string
          format: uuid
        content:
          type: string
        parent_id:
          type: string
          format: uuid
          nullable: true
    CommentUpdate:
      type: object
      required:
        - content
      properties:
        content:
          type: string
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total_items:
          type: integer
        total_pages:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT