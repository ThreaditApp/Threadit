syntax = "proto3";

package db;

option go_package = "gen/db-service/pb;pb";

import "google/protobuf/empty.proto";
import "models.proto";

service DBService {

  // community crud operations
  rpc ListCommunities (ListCommunitiesRequest) returns (ListCommunitiesResponse);
  rpc CreateCommunity (CreateCommunityRequest) returns (CreateCommunityResponse);
  rpc GetCommunity (GetCommunityRequest) returns (models.Community);
  rpc UpdateCommunity (UpdateCommunityRequest) returns (google.protobuf.Empty);
  rpc DeleteCommunity (DeleteCommunityRequest) returns (google.protobuf.Empty);

  // thread crud operations
  rpc ListThreads (ListThreadsRequest) returns (ListThreadsResponse);
  rpc CreateThread (CreateThreadRequest) returns (CreateThreadResponse);
  rpc GetThread (GetThreadRequest) returns (models.Thread);
  rpc UpdateThread (UpdateThreadRequest) returns (google.protobuf.Empty);
  rpc DeleteThread (DeleteThreadRequest) returns (google.protobuf.Empty);

  // comment crud operations
  rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse);
  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse);
  rpc GetComment(GetCommentRequest) returns (models.Comment);
  rpc UpdateComment(UpdateCommentRequest) returns (google.protobuf.Empty);
  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty);
}

message ListCommunitiesRequest {
  optional string name = 1;
  optional int32 offset = 2;
  optional int32 limit = 3;
}

message ListCommunitiesResponse {
  repeated models.Community communities = 1;
}

message CreateCommunityRequest {
  string name = 2;
}

message CreateCommunityResponse {
  string id = 1;
}

message GetCommunityRequest {
  string id = 1;
}

message UpdateCommunityRequest {
  string id = 1;
  string name = 2;
}

message DeleteCommunityRequest {
  string id = 1;
}

message ListThreadsRequest {
  optional string community_id = 1;
  optional string title = 2;
  optional int32 offset = 3;
  optional int32 limit = 4;
  optional string sort_by = 5;
}

message ListThreadsResponse {
  repeated models.Thread threads = 1;
}

message CreateThreadRequest {
  string community_id = 1;
  string title = 2;
  string content = 3;
}

message CreateThreadResponse {
  string id = 1;
}

message GetThreadRequest {
  string id = 1;
}

message UpdateThreadRequest {
  string id = 1;
  optional string title = 2;
  optional string content = 3;
  optional int32 vote_offset = 4;
}

message DeleteThreadRequest {
  string id = 1;
}

message ListCommentsRequest {
  optional string thread_id = 1;
  optional int32 offset = 2;
  optional int32 limit = 3;
  optional string sort_by = 4;
}

message ListCommentsResponse {
  repeated models.Comment comments = 1;
}

message CreateCommentRequest {
  string content = 1;
  string parent_id = 2;
  models.CommentParentType parent_type = 3;
}

message CreateCommentResponse {
  string id = 1;
}

message GetCommentRequest {
  string id = 1;
}

message UpdateCommentRequest {
  string id = 1;
  optional string content = 2;
  optional int32 vote_offset = 3;
}

message DeleteCommentRequest {
  string id = 1;
}
