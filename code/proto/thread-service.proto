syntax = "proto3";

package thread;

option go_package = "gen/thread-service/pb;pb";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "models.proto";

service ThreadService {
  rpc ListThreads (ListThreadsRequest) returns (ListThreadsResponse) {
    option (google.api.http) = {
      get: "/threads"
    };
  }

  rpc CreateThread (CreateThreadRequest) returns (CreateThreadResponse) {
    option (google.api.http) = {
      post: "/threads"
      body: "*"
    };
  }

  rpc GetThread (GetThreadRequest) returns (models.Thread) {
    option (google.api.http) = {
      get: "/threads/{id}"
    };
  }

  rpc UpdateThread (UpdateThreadRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/threads/{id}"
      body: "*"
    };
  }

  rpc DeleteThread (DeleteThreadRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/threads/{id}"
    };
  }
}

message ListThreadsRequest {
  optional string community_id = 1;
  optional string title = 2;
  optional int32 offset = 3;
  optional int32 limit = 4;
  optional string sort_by = 5;
}

message ListThreadsResponse {
  repeated models.Thread threads = 1;
}

message CreateThreadRequest {
  string community_id = 1;
  string title = 2;
  string content = 3;
}

message CreateThreadResponse {
  string id = 1;
}

message GetThreadRequest {
  string id = 1;
}

message UpdateThreadRequest {
  string id = 1;
  optional string title = 2;
  optional string content = 3;
  optional int32 vote_offset = 4;
}

message DeleteThreadRequest {
  string id = 1;
}
