
# This file contains the OpenAPI specification only for the AuthService and UserService endpoints
# TODO add the specification of the endpoints missing

openapi: 3.1.0
info:
  title: Threadit API (Eduardo Proen√ßa's contributions)
  version: 1.0.0
  description: Threadit API specification (only endpoints regarding the
    AuthService and UserService)
servers:
  - url: https://api.threadit.com/v1/
    description: Production server
paths:
  /login:
    post:
      tags:
        - auth-service
      summary: Log In
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
          description: Successfully logged in. Returns a JSON containing a token
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Log in the user and return a authentication token
      operationId: logIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
        description: Login Request
  /logout:
    post:
      tags:
        - auth-service
      summary: Log Out
      security:
        - BearerBasic: []
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Logout user by invalidating token
      operationId: logOut
  /register:
    post:
      tags:
        - auth-service
      summary: Register
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
          description: Successfully registered. Returns a JSON containing a token
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Creates a new Threadit user account
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
        description: Register request
  /users/me:
    get:
      tags:
        - user-service
      summary: Get your profile
      security:
        - BearerBasic: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: Returns a JSON object containing your user profile data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Fetches your user profile data
      operationId: getYourProfile
    patch:
      tags:
        - user-service
      summary: Update your profile
      security:
        - BearerBasic: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: Returns a JSON object containing your updated user profile data
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Updates your user profile details
      operationId: updateYourProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequest"
        required: true
        description: A JSON containing user profile details
    delete:
      tags:
        - user-service
      summary: Delete your account
      security:
        - BearerBasic: []
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters: []
      description: Deletes your account and all its data
      operationId: deleteYourAccount
  /users/{user_id}:
    get:
      tags:
        - user-service
      summary: Get a user profile
      security:
        - BearerBasic: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: Returns a JSON object containing the user profile data of the id
            given
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerErrror"
      parameters:
        - $ref: "#/components/parameters/user_id"
      description: Fetches a user profile data, according to the id given
      operationId: getAUserProfile
components:
  schemas:
    UserProfile:
      type: object
      example:
        id: "12345"
        bio: This is an example bio
        username: john.doe
        displayName: John Doe
      required:
        - id
        - displayName
        - username
        - bio
      properties:
        id:
          type: string
        bio:
          type: string
        username:
          type: string
        displayName:
          type: string
      description: Public user profile details
    AuthResponse:
      type: object
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      required:
        - token
      properties:
        token:
          type: string
      description: Contains a authentication token
    LoginRequest:
      type: object
      example:
        email: john.doe@example.com
        password: SecureP@ssw0rd
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      description: Contains the user login information
    RegisterRequest:
      type: object
      example:
        email: john.doe@example.com
        password: SecureP@ssw0rd
        displayName: John Doe
      required:
        - displayName
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
        displayName:
          type: string
      description: Contains the user register information
    UpdateProfileRequest:
      type: object
      example:
        bio: This is an updated bio
        username: john.updated
        displayName: John Updated
      properties:
        bio:
          type: string
        username:
          type: string
        displayName:
          type: string
      description: A payload for updating a user profile
  responses:
    Conflict:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
      description: The request could not be completed due to a conflict with the
        current state of the resource. Resolve the conflict and try again.
    NotFound:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
      description: The server cannot find the requested resource. The endpoint may be
        invalid or the resource may no longer exist.
    NoContent:
      content:
        application/json:
          schema:
            type: "null"
      description: The request was successful, but there is no content to return in
        the response.
    BadRequest:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              errors:
                type: array
                items:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      type: string
              message:
                type: string
      description: The server could not understand the request due to invalid syntax.
        The client should modify the request and try again.
    Unauthorized:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
      description: Authentication is required to access the requested resource. The
        client must include the appropriate credentials.
    InternalServerErrror:
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
      description: The server encountered an unexpected condition that prevented it
        from fulfilling the request. Report the issue to the support team if it
        persists.
  parameters:
    user_id:
      in: path
      name: user_id
      style: simple
      schema:
        type: string
      explode: false
      description: A unique identifier of a user
      allowReserved: false
      allowEmptyValue: true
  securitySchemes:
    BearerBasic:
      type: http
      scheme: Basic
      description: Authentication Token
      bearerFormat: BearerBasic
tags:
  - name: auth-service
    description: AuthService endpoints
  - name: user-service
    description: UserService endpoints
